"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LevelPromisify = (function () {
    function LevelPromisify(db, opts) {
        _classCallCheck(this, LevelPromisify);

        this.root = db;
        return this;
    }

    _createClass(LevelPromisify, [{
        key: "put",
        value: function put(key, value, opts) {
            var _this = this;

            if (opts) {
                opts.sync = false;
            }

            return new Promise(function (resolve, reject) {
                _this.root.put(key, value, opts, function (err) {
                    if (err) return reject(err);
                    resolve(_this);
                });
            });
        }
    }, {
        key: "get",
        value: function get(key, opts) {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                _this2.root.get(key, opts, function (err, res) {
                    if (err) return reject(err);
                    resolve(res);
                });
            });
        }
    }, {
        key: "del",
        value: function del(key, opts) {
            var _this3 = this;

            if (opts) {
                opts.sync = false;
            }

            return new Promise(function (resolve, reject) {
                _this3.root.del(key, opts, function (err) {
                    if (err) return reject(err);
                    resolve(_this3);
                });
            });
        }
    }, {
        key: "batch",
        value: function batch(ops, opts) {
            var _this4 = this;

            if (opts) {
                opts.sync = false;
            }

            return new Promise(function (resolve, reject) {
                _this4.root.batch(ops, opts, function (err) {
                    if (err) return reject(err);
                    resolve(_this4);
                });
            });
        }
    }, {
        key: "close",
        value: function close() {
            this.root.close();
        }
    }]);

    return LevelPromisify;
})();

exports["default"] = function (db, opts) {
    return new LevelPromisify(db, opts);
};

module.exports = exports["default"];